#
# PKeyGen code by Michele Fabbrini in Julia Programming Language is made available  
# under the Creative Commons Attribution license. The following is a human-readable 
# summary of (and not a substitute for) the full legal text of the CC BY 4.0 license
# https://creativecommons.org/licenses/by/4.0/.
#
# You are free:
#
#  to Share—copy and redistribute the material in any medium or format
#  to Adapt—remix, transform, and build upon the material
#
# for any purpose, even commercially.
#
# The licensor cannot revoke these freedoms as long as you follow the license terms.
#
# Under the following terms:
#
# ATTRIBUTION — You must give appropriate credit (mentioning that your work is derived 
# from work by Michele Fabbrini), provide a link to the license, and indicate if 
# changes were made.
# You may do so in any reasonable manner, but not in any way that suggests the licensor
# endorses you or your use.
#
# No additional restrictions — You may not apply legal terms or technological measures 
# that legally restrict others from doing anything the license permits. 
# With the understanding that:
#
# Notices:
#
# You do not have to comply with the license for elements of the material in the public 
# domain or where your use is permitted by an applicable exception or limitation.
# No warranties are given. The license may not give you all of the permissions necessary 
# for your intended use. For example, other rights such as publicity, privacy, or moral 
# rights may limit how you use the material.
#
# JULIA LICENCE
#     
# MIT License
#
# Copyright (c) 2009-2022: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other 
# contributors: https://github.com/JuliaLang/julia/contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Softwareù
# without restriction, including without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to the following 
# conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR  OTHER DEALINGS IN THE SOFTWARE.
#
# end of terms and conditions
#
# Please see THIRDPARTY.md for license information for other software used in this 
# project https://github.com/JuliaLang/julia/blob/master/THIRDPARTY.md

# PKeyGenPrimeMod - Version 1.0.0-beta 

using Pkg
using Primes
using Random 

# Pkg.add("Primes")

####################
# Input Validation #
####################

# Input min primarykey length
println("Input min primarykey length: ")
minlen=readline()

# Input max primarykey length
println("Input max primarykey length: ")
maxlen=readline()

# Checking minlen
function fminlenvalid()
    try
        parse(BigInt,minlen,base=10)
    catch err
        if isa(err, ArgumentError)
            println("Minlen MUST be a decimal integer!")
            sleep(10)
            exit()						 
        end
    end
end	
mindec=fminlenvalid()

# Checking maxlen
function fmaxlenvalid()
    try
        parse(BigInt,maxlen,base=10)
    catch err
        if isa(err, ArgumentError)
            println("Maxlen MUST be a decimal integer!")
            sleep(10)
            exit()						 
        end
    end
end	
maxdec=fmaxlenvalid()

#############################
# Random Integer Generation #
#############################

function frand()
    try
       @time rand(mindec:maxdec)
    catch err
        if isa(err, ArgumentError)
            println("Minlen MUST be less than Maxlen!")
            sleep(10)
            exit()						 
        end
    end   	   
end

# Random integer generated by frand function
frandvalue=frand()	
println("Frandvalue: ", frandvalue)

#########################
# Next Prime Generation #
#########################

function fnextprime()
    @time nextprime(frandvalue)
end
pkey=fnextprime()

function fcheckmax()
    if pkey > maxdec
	println("Attention! The prime number exceeds the range.")
    end
end
fcheckmax()
	
pkeybin=string(pkey,base=2)

function fwritetofile()
    open("primarykey.txt", "w") do f
                 write(f, pkeybin)
    end
end
fwritetofile()
println("Primary key has been generated and updated in 'primarykey.txt'.")		


println(" ")
println("----------------- ")
println("Primary Key Generation Report")
println("----------------- ")
println("Primary Key Base 10: ", pkey)
println("Primary Key Base  2: ", pkeybin)









